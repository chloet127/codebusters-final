base_uri <- "https://www.googleapis.com/civicinfo/v2"
resource <- "/representatives"
query_params <- list(key = google.key, address = select_address)
address <- query_params[["address"]]
response <- GET(paste0(base_uri, resource), query = query_params)
response_content <- content(response, "text")
parsed_data <- fromJSON(response_content)
## 2. extract the elected officials' data from the result
##    The data contains many relevant variables, including normalized address,
##    'offices' and 'officials'.  In order to attach the officials (people)
##    with offices (jobs), I recommend to use dplyr joins (what would be the key?)
##    More about joins in
##    http://r4ds.had.co.nz/relational-data.html
officials_data <- as.data.frame(parsed_data$officials)
officials_data$ID <- seq.int(nrow(officials_data))
office_data <- as.data.frame(parsed_data$offices) %>% rename(position = name)
office_data$freq <- unlist(lapply(parsed_data$offices$officialIndices, length))
expand <- office_data[rep(row.names(office_data), office_data$freq), ]
office_data <- expand[1:5]
office_data$ID <- seq.int(nrow(office_data))
officials_data <- (full_join(officials_data, office_data, by = "ID") %>%
select(name, party, emails, phones, photoUrl, position))
officials_data[officials_data == "NULL"] <- "-"
officials_data[officials_data == "Unknown"] <- "-"
officials_data[is.na(officials_data)] <- "-"
officials_data <- officials_data[, c(1, 6, 2, 3, 4, 5)]
#officials_data$photoUrl[] <- paste0("![", officials_data$name, "](", officials_data$photoUrl, ")")
#officials_data$photoUrl[!(is.element("https", officials_data$photoUrl))] <- "-"
View(officials_data)
return(officials_data)
}
electedOfficials(address1)
electedOfficials <- function(select_address) {
base_uri <- "https://www.googleapis.com/civicinfo/v2"
resource <- "/representatives"
query_params <- list(key = google.key, address = select_address)
address <- query_params[["address"]]
response <- GET(paste0(base_uri, resource), query = query_params)
response_content <- content(response, "text")
parsed_data <- fromJSON(response_content)
## 2. extract the elected officials' data from the result
##    The data contains many relevant variables, including normalized address,
##    'offices' and 'officials'.  In order to attach the officials (people)
##    with offices (jobs), I recommend to use dplyr joins (what would be the key?)
##    More about joins in
##    http://r4ds.had.co.nz/relational-data.html
officials_data <- as.data.frame(parsed_data$officials)
officials_data$ID <- seq.int(nrow(officials_data))
office_data <- as.data.frame(parsed_data$offices) %>% rename(position = name)
office_data$freq <- unlist(lapply(parsed_data$offices$officialIndices, length))
expand <- office_data[rep(row.names(office_data), office_data$freq), ]
office_data <- expand[1:5]
office_data$ID <- seq.int(nrow(office_data))
officials_data <- (full_join(officials_data, office_data, by = "ID") %>%
select(name, party, emails, phones, photoUrl, position))
officials_data[officials_data == "NULL"] <- "-"
officials_data[officials_data == "Unknown"] <- "-"
officials_data[is.na(officials_data)] <- "-"
officials_data <- officials_data[, c(1, 6, 2, 3, 4, 5)]
officials_data$photoUrl[] <- paste0("![", officials_data$name, "](", officials_data$photoUrl, ")")
#officials_data$photoUrl[!(is.element("https", officials_data$photoUrl))] <- "-"
View(officials_data)
return(officials_data)
}
electedOfficials(address1)
electedOfficials <- function(select_address) {
base_uri <- "https://www.googleapis.com/civicinfo/v2"
resource <- "/representatives"
query_params <- list(key = google.key, address = select_address)
address <- query_params[["address"]]
response <- GET(paste0(base_uri, resource), query = query_params)
response_content <- content(response, "text")
parsed_data <- fromJSON(response_content)
## 2. extract the elected officials' data from the result
##    The data contains many relevant variables, including normalized address,
##    'offices' and 'officials'.  In order to attach the officials (people)
##    with offices (jobs), I recommend to use dplyr joins (what would be the key?)
##    More about joins in
##    http://r4ds.had.co.nz/relational-data.html
officials_data <- as.data.frame(parsed_data$officials)
officials_data$ID <- seq.int(nrow(officials_data))
office_data <- as.data.frame(parsed_data$offices) %>% rename(position = name)
office_data$freq <- unlist(lapply(parsed_data$offices$officialIndices, length))
expand <- office_data[rep(row.names(office_data), office_data$freq), ]
office_data <- expand[1:5]
office_data$ID <- seq.int(nrow(office_data))
officials_data <- (full_join(officials_data, office_data, by = "ID") %>%
select(name, party, emails, phones, photoUrl, position))
officials_data[officials_data == "NULL"] <- "-"
officials_data[officials_data == "Unknown"] <- "-"
officials_data[is.na(officials_data)] <- "-"
officials_data <- officials_data[, c(1, 6, 2, 3, 4, 5)]
officials_data$photoUrl[] <- paste0("![", officials_data$name, "](", officials_data$photoUrl, ")")
officials_data$photoUrl[c(5, 8, 10:15, 17:32)] <- "-"
#officials_data$photoUrl[!(is.element("https", officials_data$photoUrl))] <- "-"
View(officials_data)
return(officials_data)
}
electedOfficials(address1)
electedOfficials <- function(select_address) {
base_uri <- "https://www.googleapis.com/civicinfo/v2"
resource <- "/representatives"
query_params <- list(key = google.key, address = select_address)
address <- query_params[["address"]]
response <- GET(paste0(base_uri, resource), query = query_params)
response_content <- content(response, "text")
parsed_data <- fromJSON(response_content)
## 2. extract the elected officials' data from the result
##    The data contains many relevant variables, including normalized address,
##    'offices' and 'officials'.  In order to attach the officials (people)
##    with offices (jobs), I recommend to use dplyr joins (what would be the key?)
##    More about joins in
##    http://r4ds.had.co.nz/relational-data.html
officials_data <- as.data.frame(parsed_data$officials)
officials_data$ID <- seq.int(nrow(officials_data))
office_data <- as.data.frame(parsed_data$offices) %>% rename(position = name)
office_data$freq <- unlist(lapply(parsed_data$offices$officialIndices, length))
expand <- office_data[rep(row.names(office_data), office_data$freq), ]
office_data <- expand[1:5]
office_data$ID <- seq.int(nrow(office_data))
officials_data <- (full_join(officials_data, office_data, by = "ID") %>%
select(name, party, emails, phones, photoUrl, position))
officials_data[officials_data == "NULL"] <- "-"
officials_data[officials_data == "Unknown"] <- "-"
officials_data[is.na(officials_data)] <- "-"
officials_data <- officials_data[, c(1, 6, 2, 3, 4, 5)]
officials_data$photoUrl[] <- paste0("![", officials_data$name, "](", officials_data$photoUrl, ")")
officials_data$photoUrl[grepl("https", officials_data$photoUrl, fixed = TRUE)] <- "-"
View(officials_data)
return(officials_data)
}
electedOfficials(address1)
electedOfficials <- function(select_address) {
base_uri <- "https://www.googleapis.com/civicinfo/v2"
resource <- "/representatives"
query_params <- list(key = google.key, address = select_address)
address <- query_params[["address"]]
response <- GET(paste0(base_uri, resource), query = query_params)
response_content <- content(response, "text")
parsed_data <- fromJSON(response_content)
## 2. extract the elected officials' data from the result
##    The data contains many relevant variables, including normalized address,
##    'offices' and 'officials'.  In order to attach the officials (people)
##    with offices (jobs), I recommend to use dplyr joins (what would be the key?)
##    More about joins in
##    http://r4ds.had.co.nz/relational-data.html
officials_data <- as.data.frame(parsed_data$officials)
officials_data$ID <- seq.int(nrow(officials_data))
office_data <- as.data.frame(parsed_data$offices) %>% rename(position = name)
office_data$freq <- unlist(lapply(parsed_data$offices$officialIndices, length))
expand <- office_data[rep(row.names(office_data), office_data$freq), ]
office_data <- expand[1:5]
office_data$ID <- seq.int(nrow(office_data))
officials_data <- (full_join(officials_data, office_data, by = "ID") %>%
select(name, party, emails, phones, photoUrl, position))
officials_data[officials_data == "NULL"] <- "-"
officials_data[officials_data == "Unknown"] <- "-"
officials_data[is.na(officials_data)] <- "-"
officials_data <- officials_data[, c(1, 6, 2, 3, 4, 5)]
officials_data$photoUrl[] <- paste0("![", officials_data$name, "](", officials_data$photoUrl, ")")
officials_data$photoUrl[!grepl("http", officials_data$photoUrl, fixed = TRUE)] <- "-"
View(officials_data)
return(officials_data)
}
electedOfficials(address1)
electedOfficials <- function(select_address) {
base_uri <- "https://www.googleapis.com/civicinfo/v2"
resource <- "/representatives"
query_params <- list(key = google.key, address = select_address)
address <- query_params[["address"]]
response <- GET(paste0(base_uri, resource), query = query_params)
response_content <- content(response, "text")
parsed_data <- fromJSON(response_content)
View(parsed_data)
## 2. extract the elected officials' data from the result
##    The data contains many relevant variables, including normalized address,
##    'offices' and 'officials'.  In order to attach the officials (people)
##    with offices (jobs), I recommend to use dplyr joins (what would be the key?)
##    More about joins in
##    http://r4ds.had.co.nz/relational-data.html
officials_data <- as.data.frame(parsed_data$officials)
officials_data$ID <- seq.int(nrow(officials_data))
office_data <- as.data.frame(parsed_data$offices) %>% rename(position = name)
office_data$freq <- unlist(lapply(parsed_data$offices$officialIndices, length))
expand <- office_data[rep(row.names(office_data), office_data$freq), ]
office_data <- expand[1:5]
office_data$ID <- seq.int(nrow(office_data))
officials_data <- (full_join(officials_data, office_data, by = "ID") %>%
select(name, party, emails, phones, photoUrl, position))
officials_data[officials_data == "NULL"] <- "-"
officials_data[officials_data == "Unknown"] <- "-"
officials_data[is.na(officials_data)] <- "-"
officials_data <- officials_data[, c(1, 6, 2, 3, 4, 5)]
#officials_data$photoUrl[] <- paste0("![", officials_data$name, "](", officials_data$photoUrl, ")")
#officials_data$photoUrl[!grepl("http", officials_data$photoUrl, fixed = TRUE)] <- "-"
View(officials_data)
return(officials_data)
}
electedOfficials(address1)
library(httr)
library(jsonlite)
library(dplyr)
library(knitr)
source("~/Documents/keys.R")
address1 = "1851 NE Grant Ln, Seattle, WA 98105"
source("~/keys.R")
address1 = "1851 NE Grant Ln, Seattle, WA 98105"
address2 = "1313 Disneyland Dr, Anaheim, CA 92802"
electedOfficials <- function(select_address) {
base_uri <- "https://www.googleapis.com/civicinfo/v2"
resource <- "/representatives"
query_params <- list(key = google.key, address = select_address)
address <- query_params[["address"]]
response <- GET(paste0(base_uri, resource), query = query_params)
response_content <- content(response, "text")
parsed_data <- fromJSON(response_content)
View(parsed_data)
## 2. extract the elected officials' data from the result
##    The data contains many relevant variables, including normalized address,
##    'offices' and 'officials'.  In order to attach the officials (people)
##    with offices (jobs), I recommend to use dplyr joins (what would be the key?)
##    More about joins in
##    http://r4ds.had.co.nz/relational-data.html
officials_data <- as.data.frame(parsed_data$officials)
officials_data$ID <- seq.int(nrow(officials_data))
office_data <- as.data.frame(parsed_data$offices) %>% rename(position = name)
office_data$freq <- unlist(lapply(parsed_data$offices$officialIndices, length))
expand <- office_data[rep(row.names(office_data), office_data$freq), ]
office_data <- expand[1:5]
office_data$ID <- seq.int(nrow(office_data))
officials_data <- (full_join(officials_data, office_data, by = "ID") %>%
select(name, party, emails, phones, photoUrl, position))
officials_data[officials_data == "NULL"] <- "-"
officials_data[officials_data == "Unknown"] <- "-"
officials_data[is.na(officials_data)] <- "-"
officials_data <- officials_data[, c(1, 6, 2, 3, 4, 5)]
#officials_data$photoUrl[] <- paste0("![", officials_data$name, "](", officials_data$photoUrl, ")")
#officials_data$photoUrl[!grepl("http", officials_data$photoUrl, fixed = TRUE)] <- "-"
View(officials_data)
return(officials_data)
}
electedOfficials(address1)
electedOfficials <- function(select_address) {
base_uri <- "https://www.googleapis.com/civicinfo/v2"
resource <- "/representatives"
query_params <- list(key = google.key, address = select_address)
address <- query_params[["address"]]
response <- GET(paste0(base_uri, resource), query = query_params)
response_content <- content(response, "text")
parsed_data <- fromJSON(response_content)
View(parsed_data)
## 2. extract the elected officials' data from the result
##    The data contains many relevant variables, including normalized address,
##    'offices' and 'officials'.  In order to attach the officials (people)
##    with offices (jobs), I recommend to use dplyr joins (what would be the key?)
##    More about joins in
##    http://r4ds.had.co.nz/relational-data.html
officials_data <- as.data.frame(parsed_data$officials)
officials_data$ID <- seq.int(nrow(officials_data))
office_data <- as.data.frame(parsed_data$offices) %>% rename(position = name)
office_data$freq <- unlist(lapply(parsed_data$offices$officialIndices, length))
expand <- office_data[rep(row.names(office_data), office_data$freq), ]
office_data <- expand[1:5]
office_data$ID <- seq.int(nrow(office_data))
officials_data$name[] <- paste0("[", officials_data$name, "](", officials_data$url, ")")
officials_data <- (full_join(officials_data, office_data, by = "ID") %>%
select(name, party, emails, phones, photoUrl, position))
officials_data[officials_data == "NULL"] <- "-"
officials_data[officials_data == "Unknown"] <- "-"
officials_data[is.na(officials_data)] <- "-"
officials_data <- officials_data[, c(1, 6, 2, 3, 4, 5)]
#officials_data$photoUrl[] <- paste0("![", officials_data$name, "](", officials_data$photoUrl, ")")
#officials_data$photoUrl[!grepl("http", officials_data$photoUrl, fixed = TRUE)] <- "-"
View(officials_data)
return(officials_data)
}
electedOfficials(address1)
electedOfficials <- function(select_address) {
base_uri <- "https://www.googleapis.com/civicinfo/v2"
resource <- "/representatives"
query_params <- list(key = google.key, address = select_address)
address <- query_params[["address"]]
response <- GET(paste0(base_uri, resource), query = query_params)
response_content <- content(response, "text")
parsed_data <- fromJSON(response_content)
## 2. extract the elected officials' data from the result
##    The data contains many relevant variables, including normalized address,
##    'offices' and 'officials'.  In order to attach the officials (people)
##    with offices (jobs), I recommend to use dplyr joins (what would be the key?)
##    More about joins in
##    http://r4ds.had.co.nz/relational-data.html
officials_data <- as.data.frame(parsed_data$officials)
officials_data$ID <- seq.int(nrow(officials_data))
office_data <- as.data.frame(parsed_data$offices) %>% rename(position = name)
office_data$freq <- unlist(lapply(parsed_data$offices$officialIndices, length))
expand <- office_data[rep(row.names(office_data), office_data$freq), ]
office_data <- expand[1:5]
office_data$ID <- seq.int(nrow(office_data))
officials_data$name[] <- paste0("[", officials_data$name, "](", officials_data$url, ")")
officials_data <- (full_join(officials_data, office_data, by = "ID") %>%
select(name, party, emails, phones, photoUrl, position))
officials_data[officials_data == "NULL"] <- "-"
officials_data[officials_data == "Unknown"] <- "-"
officials_data[is.na(officials_data)] <- "-"
officials_data <- officials_data[, c(1, 6, 2, 3, 4, 5)]
View(officials_data)
return(officials_data)
}
electedOfficials(address1)
knitr::opts_chunk$set(echo=FALSE, message=FALSE)
library(dplyr)
library(dplyr)
library(jsonlite)
library(httr)
library(knitr)
source("~/keys.R")
source('process-data.R')
chart <- read.csv(file = "~/Desktop/info201/a7-collaboration-codebusters/data/presidential_2008-2016.csv.bz2")
chart <- read.csv(file = "C:/Users/dytro_000/Desktop/info201/a7-collaboration-codebusters/data/presidential_2008-2016.csv.bz2")
library(ggplot2)
library(dplyr)
library(httr)
chart <- read.csv(file = "C:/Users/dytro_000/Desktop/info201/a7-collaboration-codebusters/data/presidential_2008-2016.csv.bz2")
View(chart)
chart <- read.delim(file = "C:/Users/dytro_000/Desktop/info201/a7-collaboration-codebusters/data/presidential_2008-2016.csv.bz2")
View(chart)
library(stringr)
library(knitr)
chart <- read.delim(file = "C:/Users/dytro_000/Desktop/info201/a7-collaboration-codebusters/data/presidential_2008-2016.csv.bz2")
library(httr)
library(stringr)
library(knitr)
chart <- read.delim(file = "C:/Users/dytro_000/Desktop/info201/a7-collaboration-codebusters/data/presidential_2008-2016.csv.bz2")
View(chart)
chart %>% group.By(state)
chart %>% group_by(state)
View(chart)
chart %>% group_by(state)
View(chart)
chart <- group_by(chart, state)
View(chart)
chart <- group_by(chart, state) %>% summarize(state = state)
chart <- group_by(chart, state) %>% summarize(total_2008 = mean(total_2008))
View(chart)
chart <- group_by(chart, state) #%>% summarize(total_2008 = mean(total_2008))
View(chart)
chart <- group_by(chart, state) #%>% summarize(total_2008 = mean(total_2008))
View(chart)
chart <- read.delim(file = "C:/Users/dytro_000/Desktop/info201/a7-collaboration-codebusters/data/presidential_2008-2016.csv.bz2")
chart <- group_by(chart, state) #%>% summarize(total_2008 = mean(total_2008))
View(chart)
chart <- group_by(chart, state) %>% summarize(total_2016 = mean(total_2016),
dem_2016 <- mean(dem_2016),
gop_2016 <- mean(gop_2016)
oth_2016 <- mean(oth_2016))
chart <- group_by(chart, state) %>% summarize(total_2016 = mean(total_2016),
dem_2016 <- mean(dem_2016),
gop_2016 <- mean(gop_2016),
oth_2016 <- mean(oth_2016))
View(chart)
chart <- group_by(chart, state) %>% summarize(total_2016 = mean(total_2016),
dem_2016 = mean(dem_2016),
gop_2016 = mean(gop_2016),
oth_2016 = mean(oth_2016))
View(chart)
chart <- read.delim(file = "C:/Users/dytro_000/Desktop/info201/a7-collaboration-codebusters/data/presidential_2008-2016.csv.bz2")
View(chart)
chart <- group_by(chart, state) %>% summarize(total_2016 = mean(total_2016),
dem_2016 = mean(dem_2016),
gop_2016 = mean(gop_2016),
oth_2016 = mean(oth_2016))
View(chart)
chart <- read.delim(file = "C:/Users/dytro_000/Desktop/info201/a7-collaboration-codebusters/data/presidential_2008-2016.csv.bz2")
library(ggplot2)
library(dplyr)
library(httr)
library(stringr)
library(knitr)
chart <- read.delim(file = "C:/Users/dytro_000/Desktop/info201/a7-collaboration-codebusters/data/presidential_2008-2016.csv.bz2")
View(chart)
chart <- read.delim(file = "C:/Users/dytro_000/Desktop/info201/a7-collaboration-codebusters/data/presidential_2008-2016.csv.bz2")
#data <- data.frame(murder = USArrests$Murder, state = tolower(rownames(USArrests)))
map <- map_data("county")
k <- ggplot(chart, aes(fill = chart$total_2016))
k + geom_map(aes(map_id = county), map = map) +
expand_limits(x = map$long, y = map$lat)
k <- ggplot(chart, aes(fill = chart$total_2016))
k + geom_map(aes(map_id = county), map = map) #+
k <- ggplot(chart, aes(fill = chart$total_2016))
k + geom_map(aes(map_id = "county"), map = map) #+
data <- data.frame(murder = USArrests$Murder, state = tolower(rownames(USArrests)))
map <- map_data("state")
k <- ggplot(data, aes(fill = murder))
k + geom_map(aes(map_id = state), map = map) +
expand_limits(x = map$long, y = map$lat)
View(data)
map <- map_data("county")
k <- ggplot(chart, aes(fill = chart$total_2016))
View(k)
k + geom_map(aes(map_id = county), map = map) +
expand_limits(x = map$long, y = map$lat)
map <- map_data("county")
k <- ggplot(chart, aes(fill = chart$total_2016))
k + geom_map(aes(map_id = county), map = map) #+
data <- data.frame(murder = USArrests$Murder, state = tolower(rownames(USArrests)))
map <- map_data("state")
k <- ggplot(data, aes(fill = murder))
k + geom_map(aes(map_id = state), map = map) +
expand_limits(x = map$long, y = map$lat)
chart <- group_by(chart, state) %>% summarize(total_2016 = mean(total_2016),
dem_2016 = mean(dem_2016),
gop_2016 = mean(gop_2016),
oth_2016 = mean(oth_2016))
data <- data.frame(murder = USArrests$Murder, state = tolower(rownames(USArrests)))
map <- map_data("state")
k <- ggplot(data, aes(fill = murder))
k + geom_map(aes(map_id = state), map = map) +
expand_limits(x = map$long, y = map$lat)
View(k)
map <- map_data("county")
f <- ggplot(chart, aes(fill = chart$total_2016))
f + geom_map(aes(map_id = county), map = map) #+
chart <- read.delim(file = "C:/Users/dytro_000/Desktop/info201/a7-collaboration-codebusters/data/presidential_2008-2016.csv.bz2")
map <- map_data("county")
f <- ggplot(chart, aes(fill = chart$total_2016))
f + geom_map(aes(map_id = county), map = map) #+
data <- data.frame(murder = USArrests$Murder, state = tolower(rownames(USArrests)))
map <- map_data("state")
k <- ggplot(data, aes(fill = murder))
k + geom_map(aes(map_id = state), map = map) +
expand_limits(x = map$long, y = map$lat)
k + geom_map(aes(map_id = state), map = map) +
expand_limits(x = map$long, y = map$lat)
map2 <- map_data("county")
View(map2)
View(map)
map2 <- map_data("county")
f <- ggplot(chart, aes(fill = total_2016))
f + geom_map(map2 = map2) +
expand_limits(x = map2$long, y = map2$lat)
library(dplyr)
library(ggplot2)
library(shiny)
setwd("C:/Users/dytro_000/Desktop/info201/final")
world <- read.delim(file = "data/world-happiness.xls")
world <- read.delim(file = "data/world-happiness.xls", header = FALSE)
world <- read.delim(file = "data/world-happiness.xls", sep = ",")
world <- read.delim(file = "data/world-happiness.xls", sep = ",", na.rm = TRUE)
world <- read.delim(file = "data/world-happiness.xls", sep = ",")
install.packages("gdata")
library(gdata)
library(gdata)
world <- read.xls(file = "data/world-happiness.xls")
world <- read.xls("data/world-happiness.xls")
world <- read.xls("./data/world-happiness.xls")
getwd()
world <- read.xls("world-happiness.xls", perl = "data/world-happiness.xls")
library(dplyr)
library(ggplot2)
library(shiny)
library(gdata)
world <- read.xls("world-happiness.xls", perl = "data/world-happiness.xls")
install.packages("gdata")
install.packages("gdata")
getwd()
library(dplyr)
library(ggplot2)
library(shiny)
library(gdata)
world <- read.xls("world-happiness.xls", perl = "data/world-happiness.xls")
world <- read.xls("data/world-happiness.xls")
install.packages("readxl")
library(readxl)
world <- read_excel("data/world-happiness.xls")
View(world)
world2 <- read_excel("data/world-happiness.xls", sheet = 2)
View(world2)
%>% select("Country", "Happiness score")
world2 < select(world2, Country, Happiness score)
world2 <- select(world2, Country, Happiness score)
world2 <- select(world2, Country)
View(world2)
world2 <- read_excel("data/world-happiness.xls", sheet = 2)
View(world2)
world2 <- select(world2, Country, "Happiness score")
View(world2)
install.packages(ggmap)
install.packages("ggmap")
install.packages("maps")
install.packages("rworldmap")
map.world <- map_data(map="world")
map.world <- map_data(map="world")
#Add the data you want to map countries by to map.world
#In this example, I add lengths of country names plus some offset
map.world$name_len <- nchar(map.world$region) + sample(nrow(map.world))
gg <- ggplot()
gg <- gg + theme(legend.position="none")
gg <- gg + geom_map(data=map.world, map=map.world, aes(map_id=region, x=long, y=lat, fill=name_len))
gg <- gg + scale_fill_gradient(low = "green", high = "brown3", guide = "colourbar")
gg <- gg + coord_equal()
gg
names(world) <- gsub(" ", "-", names(world2))
names(world2) <- gsub(" ", "-", names(world2))
View(world2)
world2 <- select(world2, Country, Happiness-score)
world2 <- read_excel("data/world-happiness.xls", sheet = 2)
names(world2) <- gsub(" ", "_", names(world2))
View(world2)
world2 <- select(world2, Country, Happiness_score)
View(world2)
View(map.world)
world1 <- read_excel("data/world-happiness.xls")
